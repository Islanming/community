<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community.mapper.UserMapper">

    <sql id="selectFields">
        id, username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <sql id="insertFields">
        username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

<!--    若返回结果为自定义的bean，则需要用 resultType 声明-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

<!--    若传入参数为自定义的bean，则需要用parameterType声明，并且用keyProperty声明主键对应的字段，-->
<!--    插入操作时，数据库中会自动生成id，mybatis获取到，回填到User中-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>

    <update id="updateStatus">
        update user set status = #{status}
        where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl}
        where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password}
        where id = #{id}
    </update>


</mapper>